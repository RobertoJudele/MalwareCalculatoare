#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>
using namespace std;
const vector<string> eximports={"ntoskrnl.exe"};
const vector<string> exstringuri_semnificative={"System Service Descriptor Table", "SSDT", "NtCreateFile"};
vector<string> exfunctionList={"[Up]", "[Num Lock]", "[Down]", "[Right]", "[UP]", "[Left]", "[PageDown]"};
vector<string> exhotKeys={"CreateFileW", "OpenProcess", "ReadFile", "WriteFile", "RegisterHotKey", "SetWindowsHookEx"};
class malware{
protected:
    int impactRating=0;
    string date;
    string name;
    string method;
    vector<string> reg;
public:
    malware(string name, string date, vector<string> reg, string method):
    name(name),date(date),method(method),reg(reg){}
    virtual int getImpact(){
        return impactRating;
    };
    virtual ostream& print(ostream& os){
        os<<"Date: "<<date<<endl;
        os<<"Name: "<<name<<endl;
        os<<"Method: "<<method<<endl;
        os<<"Impact Rating: "<<impactRating<<endl;
        for(auto str: reg){
            os<<str<<" ";
        }
        os<<endl;
        return os;
    }
    friend ostream& operator <<(ostream& os, malware& malware){
        return malware.print(os);
    }
};
class rootkit:virtual public malware{
protected:
    vector<string> imports;
    vector<string> semnificativeStrings;
public:
    rootkit(string name, string date, vector<string> reg,string method,vector<string> imports,
            vector<string> semnificativeStrings): malware(name,date,reg,method),imports(imports),semnificativeStrings(semnificativeStrings){}
    virtual int getImpact() override{
        for(auto str:semnificativeStrings){
            for(auto exstr:exstringuri_semnificative){
                if(str==exstr){
                    impactRating+=100;
                }
            }
        }
        for(auto str:imports){
            for(auto ex:eximports){
                if(str==ex){
                    impactRating*=2;
                }
            }
        }
        return impactRating;
    }
    virtual ostream & print(ostream &os) override{
        malware::print(os);
        os<<"Semnificative strings: ";
        for(auto str:semnificativeStrings){
            os<<str<<" ";
        }
        os<<endl<<"Imports: ";
        for(auto str:imports){
            os<<str<<" ";
        }
        os<<endl;
        return os;
    }
    friend ostream& operator <<(ostream& os, rootkit& rootkit){
        rootkit.print(os);
    }
};
class keylogger:virtual public malware{
protected:
    vector<string> functions;
    vector<string> hotkeys;
public:
    keylogger(string name, string date, vector<string> reg,string method,vector<string> functions,
    vector<string> hotkeys): malware(name,date,reg,method),functions(functions),hotkeys(hotkeys){}
    virtual int getImpact() override{
        for(auto str:functions){
            for(auto ex:exfunctionList){
                if(ex==str){
                    impactRating+=30;
                }
            }
        }
        for(auto str:hotkeys)
            for(auto ex:exhotKeys)
                if(ex==str)
                    impactRating+=10;
    }
    virtual ostream& print(ostream& os) override{
        malware::print(os);
        os<<"Functions: ";
        for(auto str:functions)
            os<<str<<" ";
        os<<endl<<"Hotkeys: ";
        for(auto str:hotkeys)
            os<<str<<" ";
        os<<endl<<endl;
        return os;
    }
    friend ostream& operator <<(ostream& os, keylogger& keylogger){
        keylogger.print(os);
    }
};
class kernelKeylogger: public rootkit, public keylogger{
protected:
    bool hidden_files;
    bool hidden_registers;
public:
    kernelKeylogger(string name, string date, vector<string> reg, string method,vector<string>functions,vector<string> hotkeys,vector<string>imports,vector<string>semnificativeStrings,bool hidden_files,bool hidden_registers):
            malware(name,date,reg,method), keylogger(name,date, reg, method,functions,hotkeys),rootkit(name, date,reg,method,imports,
                                                                                                       semnificativeStrings),hidden_files(hidden_files),hidden_registers(hidden_registers){}
    virtual int getImpact() override{
        int impact=keylogger::getImpact()+rootkit::getImpact();
        if(hidden_files)
            impact+=20;
        if(hidden_registers)
            impact+=30;
        return impact;
    }
    virtual ostream& print(ostream& os) override{
        keylogger::print(os);
        rootkit::print(os);
        return os;
    }
};

class calculator{
protected:
    vector<malware*> vectorMalware;
    int finalRating=0;
public:
    void addMalware(class malware* malware){
        vectorMalware.push_back(malware);
    }
    int getImpact(){
        for(auto mal:vectorMalware){
            finalRating+=mal->getImpact();
        }
        return finalRating;
    }
    void showDetails(){
        cout<<getImpact();
        for(auto mal:vectorMalware){
            cout<<*mal<<endl;
        }
    }
    friend ostream& operator <<(ostream& os, calculator calculator){

    }
};

class toateCalculatoarele{
protected:
    unordered_map<int,calculator> calculatoare;
    int id;
public:
    void addCalculator(calculator calculator){
        calculatoare[calculatoare.size()]=calculator;
    }
    void showAll(){
        for(int i=0;i<calculatoare.size();i++){
            calculatoare[i].showDetails();
            cout<<endl;
        }
    }
};

int main() {
    malware malware("Virus","Azi",{"asd"},"directa");
    kernelKeylogger* kernelkeyloggerPtr=new kernelKeylogger("Virus","Azi",{"asd"},"directa",{"[Up]","[Down]","[Left]","[Right]"},{"CreateFileW","OpenProcess","ReadFile","WriteFile","RegisterHotKey","SetWindowsHookEx"}
    ,{"ntoskrnl.exe","System Service Descriptor Table","SSDT"},{""},true,true);
    keylogger* keyloggerPtr= new keylogger("Virus","Azi",{"asd"},"directa",{"[Up]","[Down]","[Left]","[Right]"},{"CreateFileW","OpenProcess","ReadFile","WriteFile","RegisterHotKey","SetWindowsHookEx"});
    calculator calculator1;
    calculator calculator2;
    calculator2.addMalware(kernelkeyloggerPtr);
    calculator1.addMalware(keyloggerPtr);
    toateCalculatoarele toateCalculatoarele;
    toateCalculatoarele.addCalculator(calculator1);
    cout<<endl;
    toateCalculatoarele.addCalculator(calculator2);
    toateCalculatoarele.showAll();
    return 0;
}
